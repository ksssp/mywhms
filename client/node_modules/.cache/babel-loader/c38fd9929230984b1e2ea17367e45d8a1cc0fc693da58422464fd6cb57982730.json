{"ast":null,"code":"import ProductFormSchema from './schemas/ProductFormSchema';\nimport { createProduct, updateProduct } from '@/services/ProductService';\nexport default {\n  name: 'ProductForm',\n  props: [\"formData\", \"submitMode\"],\n  data: function () {\n    return {\n      formSchema: ProductFormSchema,\n      formOptions: {\n        validateAfterChanged: true\n      },\n      loadedProductId: \"\",\n      isSaving: false,\n      formModel: {\n        productName: \"\",\n        productSubGroupPrefix: \"\",\n        computedProductName: \"\",\n        hamaliPerBag: 0,\n        platformCooliePerBag: 0,\n        kataCooliePerBag: 0,\n        mamulluPerBag: 0,\n        monthlyRentPerBag: 0,\n        yearlyRentPerBag: 0,\n        insurancePerBag: 0,\n        yearlyRentPerKg: 0,\n        bagSize: 0,\n        computedYearlyRentPerBag: 0\n      }\n    };\n  },\n  created() {\n    this.formModel.productCode = this.formData.productCode;\n    this.formModel.productFullName = this.formData.productFullName;\n    this.formModel.designation = this.formData.designation;\n    this.formModel.monthlySalary = this.formData.monthlySalary;\n    this.loadedProductId = this.formData._id;\n  },\n  methods: {\n    submitProductDetails() {\n      if (this.submitMode == \"update\") {\n        updateProduct(this.loadedProductId, this.formModel).then(response => {\n          var saveActionStatus = response;\n          this.$emit('productSaved', saveActionStatus);\n        });\n      } else if (this.submitMode == \"create\") {\n        console.log(\"Create Product : \", this.formModel);\n        let newProduct = {\n          productCode: this.formModel.productCode,\n          productFullName: this.formModel.productFullName,\n          designation: this.formModel.designation,\n          monthlySalary: this.formModel.monthlySalary,\n          creationDate: Date.now()\n        };\n        createProduct(newProduct).then(response => {\n          var createdProduct = response;\n          this.$emit('productSaved', createdProduct);\n        });\n      }\n    },\n    cancelProductForm() {\n      this.$emit('productEditCancelled');\n    }\n  }\n};","map":{"version":3,"names":["ProductFormSchema","createProduct","updateProduct","name","props","data","formSchema","formOptions","validateAfterChanged","loadedProductId","isSaving","formModel","productName","productSubGroupPrefix","computedProductName","hamaliPerBag","platformCooliePerBag","kataCooliePerBag","mamulluPerBag","monthlyRentPerBag","yearlyRentPerBag","insurancePerBag","yearlyRentPerKg","bagSize","computedYearlyRentPerBag","created","productCode","formData","productFullName","designation","monthlySalary","_id","methods","submitProductDetails","submitMode","then","response","saveActionStatus","$emit","console","log","newProduct","creationDate","Date","now","createdProduct","cancelProductForm"],"sources":["src/pages/referenceData/forms/ProductForm.vue"],"sourcesContent":["<template>\n    <div class=\"tables\">\n        <form action=\"\" @submit.prevent=\"submitProductDetails\" class=\"col-md-9 app-crud-form py-4 my-2\">\n            <vue-form-generator tag=\"div\" :schema=\"formSchema\" :options=\"formOptions\" :model=\"formModel\"/>\n            <div class=\"d-flex justify-content-end mt-3 pr-4\">\n                <button v-on:click=\"cancelProductForm\" type=\"button\" class=\"btn btn-secondary btn-md\">\n                        Cancel\n                </button>\n                <button type=\"submit\" class=\"btn btn-primary btn-md\">\n                    {{ isSaving ? 'Saving...' : 'Save' }}\n                </button>\n            </div>\n        </form>\n    </div>\n</template>\n\n<script scoped lang=\"js\">\n\nimport ProductFormSchema from './schemas/ProductFormSchema';\nimport { createProduct, updateProduct } from '@/services/ProductService';\n\nexport default {\n    name: 'ProductForm',\n    props: [\n        \"formData\",\n        \"submitMode\"\n    ],\n    data: function () {\n        return {\n            formSchema: ProductFormSchema,\n            formOptions: {\n                validateAfterChanged: true\n            },\n            loadedProductId: \"\",\n            isSaving: false,\n            formModel: {\n                productName: \"\",\n                productSubGroupPrefix: \"\",\n                computedProductName: \"\",\n                hamaliPerBag: 0,\n                platformCooliePerBag: 0,\n                kataCooliePerBag: 0,\n                mamulluPerBag: 0,\n                monthlyRentPerBag: 0,\n                yearlyRentPerBag: 0,\n                insurancePerBag: 0,\n                yearlyRentPerKg: 0,\n                bagSize: 0,\n                computedYearlyRentPerBag: 0\n            }\n        }\n    },\n    created() {\n        this.formModel.productCode = this.formData.productCode;\n        this.formModel.productFullName = this.formData.productFullName;\n        this.formModel.designation = this.formData.designation;\n        this.formModel.monthlySalary = this.formData.monthlySalary;\n        this.loadedProductId = this.formData._id;\n    },\n    methods: {\n        submitProductDetails() {\n            if(this.submitMode==\"update\") {\n                updateProduct(this.loadedProductId, this.formModel).then(response => {\n                    var saveActionStatus = response;\n                    this.$emit('productSaved', saveActionStatus);\n                });\n            } else if (this.submitMode == \"create\") {\n                console.log(\"Create Product : \", this.formModel);\n                let newProduct = {\n                    productCode: this.formModel.productCode,\n                    productFullName: this.formModel.productFullName,\n                    designation: this.formModel.designation,\n                    monthlySalary: this.formModel.monthlySalary,\n                    creationDate: Date.now()\n                };\n                createProduct(newProduct).then(response => {\n                    var createdProduct = response;\n                    this.$emit('productSaved', createdProduct);\n                });\n            }\n        },\n        cancelProductForm() {\n            this.$emit('productEditCancelled');\n        }\n    }\n}\n</script>"],"mappings":"AAkBA,OAAAA,iBAAA;AACA,SAAAC,aAAA,EAAAC,aAAA;AAEA;EACAC,IAAA;EACAC,KAAA,GACA,YACA,aACA;EACAC,IAAA,WAAAA,CAAA;IACA;MACAC,UAAA,EAAAN,iBAAA;MACAO,WAAA;QACAC,oBAAA;MACA;MACAC,eAAA;MACAC,QAAA;MACAC,SAAA;QACAC,WAAA;QACAC,qBAAA;QACAC,mBAAA;QACAC,YAAA;QACAC,oBAAA;QACAC,gBAAA;QACAC,aAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,eAAA;QACAC,eAAA;QACAC,OAAA;QACAC,wBAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAd,SAAA,CAAAe,WAAA,QAAAC,QAAA,CAAAD,WAAA;IACA,KAAAf,SAAA,CAAAiB,eAAA,QAAAD,QAAA,CAAAC,eAAA;IACA,KAAAjB,SAAA,CAAAkB,WAAA,QAAAF,QAAA,CAAAE,WAAA;IACA,KAAAlB,SAAA,CAAAmB,aAAA,QAAAH,QAAA,CAAAG,aAAA;IACA,KAAArB,eAAA,QAAAkB,QAAA,CAAAI,GAAA;EACA;EACAC,OAAA;IACAC,qBAAA;MACA,SAAAC,UAAA;QACAhC,aAAA,MAAAO,eAAA,OAAAE,SAAA,EAAAwB,IAAA,CAAAC,QAAA;UACA,IAAAC,gBAAA,GAAAD,QAAA;UACA,KAAAE,KAAA,iBAAAD,gBAAA;QACA;MACA,gBAAAH,UAAA;QACAK,OAAA,CAAAC,GAAA,2BAAA7B,SAAA;QACA,IAAA8B,UAAA;UACAf,WAAA,OAAAf,SAAA,CAAAe,WAAA;UACAE,eAAA,OAAAjB,SAAA,CAAAiB,eAAA;UACAC,WAAA,OAAAlB,SAAA,CAAAkB,WAAA;UACAC,aAAA,OAAAnB,SAAA,CAAAmB,aAAA;UACAY,YAAA,EAAAC,IAAA,CAAAC,GAAA;QACA;QACA3C,aAAA,CAAAwC,UAAA,EAAAN,IAAA,CAAAC,QAAA;UACA,IAAAS,cAAA,GAAAT,QAAA;UACA,KAAAE,KAAA,iBAAAO,cAAA;QACA;MACA;IACA;IACAC,kBAAA;MACA,KAAAR,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}